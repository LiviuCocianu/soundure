import React, { useMemo, useState } from 'react'
import { Text, Actionsheet, HStack, AspectRatio, Image, VStack, Factory, ScrollView } from 'native-base'
import { useSelector } from 'react-redux';

import MarqueeText from 'react-native-marquee'

import { handleColors, handleCoverURI, lng } from '../../../functions';
import { useEffect } from 'react';


const MarqueeNB = Factory(MarqueeText);

/**
 * @callback onOpen
 * @callback onClose
 */

/**
 * PlaylistDescriptionSheet component
 * 
 * @param {object} props props object
 * @param {number} props.playlistId ID corresponding to the playlist
 * 
 * @param {object} props.disclose NativeBase object generated by useDisclose hook 
 * @param {boolean} props.disclose.isOpen Indicates if the sheet is shown
 * @param {onOpen} props.disclose.onOpen Toggles isOpen to true
 * @param {onClose} props.disclose.onClose Toggles isClose to false
 * 
 * @returns {JSX.Element} JSX component
 */
const PlaylistDescriptionSheet = ({
    playlistId,
    disclose: {
        isOpen,
        onOpen,
        onClose
    }
}) => {
    const [coverColors, setCoverColors] = useState({});

    const playlists = useSelector(state => state.playlists);

    const playlist = useMemo(() => {
        const found = playlists.find(pl => pl.id == playlistId);
        return found ? found : {};
    }, [playlists]);

    const cover = useMemo(() => handleCoverURI(playlist.coverURI), [playlist.coverURI]);
    const sheetGradient = useMemo(() => lng([coverColors.primary, coverColors.detail], "bottom"), [coverColors]);

    useEffect(() => {
        handleColors(cover).then(color => setCoverColors(color));
    }, [cover]);

    return (
        <Actionsheet isOpen={isOpen} onOpen={onOpen} onClose={onClose} >
            <Actionsheet.Content w="100%"
                bg={sheetGradient}
                _dragIndicator={{bg: "transparent"}}
            >
                <HStack w="100%" minH="100" pb="4" pl="2" space="4">
                    <AspectRatio ratio="4/4">
                        <Image w="100%" maxW="100" maxH="100"
                            source={cover}
                            alt="playlist description cover"
                            size="100%"
                            rounded="xl"
                            borderColor="black"
                            borderWidth="1"
                        />
                    </AspectRatio>

                    <VStack w="60%" mr="2" flexGrow="1" space="2">
                        <MarqueeNB w="90%"
                            color="white"
                            fontFamily="quicksand_b"
                            fontSize="md"
                            speed={0.5}
                            style={{
                                textShadowRadius: 5,
                                textShadowColor: 'black',
                                textShadowOffset: { width: 1, height: 1 }
                            }}
                        >
                            {playlist.title}
                        </MarqueeNB>

                        <ScrollView h="65">
                            <Text color="white"
                                fontFamily="manrope_r"
                                fontSize="xs"
                                lineHeight="sm"
                                style={{
                                    textShadowRadius: 5,
                                    textShadowColor: 'black',
                                    textShadowOffset: { width: 1, height: 1 }
                                }}
                            >
                                {playlist.description.length == 0
                                    ? (<Text fontFamily="manrope_li">Nu existÄƒ o descriere pentru acest playlist</Text>)
                                    : playlist.description}
                            </Text>
                        </ScrollView>
                    </VStack>
                </HStack>
            </Actionsheet.Content>
        </Actionsheet>
    )
}


export default PlaylistDescriptionSheet