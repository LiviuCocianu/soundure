import React, { useState } from 'react';
import { Factory } from 'native-base';

import { useDispatch } from 'react-redux';

import CustomActionsheet from '../../general/CustomActionsheet';
import { CustomActionsheetItem } from '../../general/CustomActionsheet';
import ConfirmationWindow from '../../modals/ConfirmationWindow';
import { MaterialCommunityIcons } from "@expo/vector-icons"

import { StackActions } from '@react-navigation/native';
import { PlaylistUtils } from '../../../database/componentUtils';


const MaterialCommunityIconsNB = Factory(MaterialCommunityIcons);

/**
 * @callback onOpen
 * @callback onClose
 */

/**
 * PlaylistSettingsSheet component.
 * 
 * Settings sheet for configuring a playlist
 * 
 * @param {object} props props object
 * @param {object} props.navigation Object generated by React Navigation
 * @param {object} props.payload Object that contains information relating to the playlist
 * 
 * @param {object} props.discloseObject NativeBase object generated by useDisclose hook
 * @param {boolean} props.discloseObject.isOpen Indicates if the sheet is shown
 * @param {onOpen} props.discloseObject.onOpen Toggles isOpen to true
 * @param {onClose} props.discloseObject.onClose Toggles isClose to false
 * 
 * @returns {JSX.Element} JSX component
 */
const PlaylistSettingsSheet = ({
    navigation,
    payload,
    discloseObject: {
        isOpen,
        onOpen,
        onClose
    }
}) => {
    const dispatch = useDispatch();

    const [deletionModal, toggleDeletionModal] = useState(false);

    const handleBack = () => {
        if(navigation.canGoBack()) {
            navigation.dispatch(StackActions.pop());
        }
    }

    const handleTrackListNav = (navigation, payload) => {
        navigation.navigate("TrackList", { payload });
    }

    const handleTrackListOption = async () => {
        await onClose();
        handleTrackListNav(navigation, payload);
    }

    const handleDeletionModal = () => {
        onClose();
        toggleDeletionModal(true);
    }

    const handlePlaylistDeletion = () => {
        PlaylistUtils.deletePlaylist(payload.id, dispatch);
        handleBack();
    }

    return (
        <>
            <ConfirmationWindow
                isOpen={deletionModal}
                toggleVisible={toggleDeletionModal}
                onYes={handlePlaylistDeletion}
            />

            <CustomActionsheet
                title="Setări playlist"
                isOpen={isOpen}
                onOpen={onOpen}
                onClose={onClose}
            >
                <CustomActionsheetItem text="Adaugă o piesă"
                    iconName="playlist-plus"
                    IconType={MaterialCommunityIconsNB}
                    onPress={handleTrackListOption} />

                <CustomActionsheetItem text="Șterge playlist"
                    iconName="playlist-remove"
                    IconType={MaterialCommunityIconsNB}
                    onPress={handleDeletionModal} />
            </CustomActionsheet>
        </>
    );
};


export default PlaylistSettingsSheet;
