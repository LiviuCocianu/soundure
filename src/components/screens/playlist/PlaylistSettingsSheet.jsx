import React, { useState, useMemo } from 'react';
import { Factory, useDisclose } from 'native-base';

import { useDispatch, useSelector } from 'react-redux';

import CustomActionsheet from '../../general/CustomActionsheet';
import { CustomActionsheetItem } from '../../general/CustomActionsheet';
import ConfirmationWindow from '../../modals/ConfirmationWindow';
import { MaterialCommunityIcons, AntDesign } from "@expo/vector-icons"

import { StackActions } from '@react-navigation/native';
import { PlaylistBridge } from '../../../database/componentBridge';
import PlaylistDescriptionSheet from './PlaylistDescriptionSheet';


const MaterialCommunityIconsNB = Factory(MaterialCommunityIcons);
const AntDesignNB = Factory(AntDesign);

/**
 * @callback onOpen
 * @callback onClose
 */

/**
 * PlaylistSettingsSheet component.
 * 
 * Settings sheet for configuring a playlist
 * 
 * @param {object} props props object
 * @param {object} props.navigation Object generated by React Navigation
 * @param {object} props.playlistId ID corresponding to the playlist
 * 
 * @param {object} props.discloseObject NativeBase object generated by useDisclose hook
 * @param {boolean} props.discloseObject.isOpen Indicates if the sheet is shown
 * @param {onOpen} props.discloseObject.onOpen Toggles isOpen to true
 * @param {onClose} props.discloseObject.onClose Toggles isClose to false
 * 
 * @returns {JSX.Element} JSX component
 */
const PlaylistSettingsSheet = ({
    navigation,
    playlistId,
    discloseObject: {
        isOpen,
        onOpen,
        onClose
    }
}) => {
    const dispatch = useDispatch();

    const descriptionDisclose = useDisclose();
    const [playlistDelModal, togglePlaylistDelModal] = useState(false);
    const [coverDelModal, toggleCoverDelModal] = useState(false);

    const playlists = useSelector(state => state.playlists);
    const playlist = useMemo(() => {
        return playlists.find(pl => pl.id == playlistId);
    }, [playlists]);

    const handleBack = () => {
        if(navigation.canGoBack()) {
            navigation.dispatch(StackActions.pop());
        }
    }

    const handleTrackListNav = (navigation, payload) => {
        navigation.navigate("TrackList", { payload });
    }

    const handlePlaylistDescription = async () => {
        await onClose();
        descriptionDisclose.onOpen();
    }

    const handleTrackListOption = async () => {
        await onClose();
        handleTrackListNav(navigation, playlist);
    }

    const handleCoverDelModal = async () => {
        await onClose();
        toggleCoverDelModal(true);
    }

    const handleCoverDeletion = async () => {
        await PlaylistBridge.setCoverURI("DEFAULT", playlistId, dispatch);
    }

    const handleDeletionModal = async () => {
        await onClose();
        togglePlaylistDelModal(true);
    }

    const handlePlaylistDeletion = () => {
        handleBack();
        PlaylistBridge.deletePlaylist(playlistId, dispatch);
    }

    return (
        <>
            <ConfirmationWindow
                isOpen={playlistDelModal}
                toggleVisible={togglePlaylistDelModal}
                onYes={handlePlaylistDeletion}
            />

            <ConfirmationWindow
                isOpen={coverDelModal}
                toggleVisible={toggleCoverDelModal}
                onYes={handleCoverDeletion}
            />

            <PlaylistDescriptionSheet 
                playlistId={playlistId}
                disclose={descriptionDisclose}/>

            <CustomActionsheet
                title="Setări playlist"
                isOpen={isOpen}
                onOpen={onOpen}
                onClose={onClose}
            >
                <CustomActionsheetItem text="Despre playlist"
                    iconName="tag"
                    IconType={AntDesignNB}
                    onPress={handlePlaylistDescription} />

                <CustomActionsheetItem text="Șterge copertă"
                    iconName="file-image-remove"
                    IconType={MaterialCommunityIconsNB}
                    onPress={handleCoverDelModal} />

                <CustomActionsheetItem text="Adaugă o piesă"
                    iconName="playlist-plus"
                    IconType={MaterialCommunityIconsNB}
                    onPress={handleTrackListOption} />

                <CustomActionsheetItem text="Șterge playlist"
                    iconName="playlist-remove"
                    IconType={MaterialCommunityIconsNB}
                    onPress={handleDeletionModal} />
            </CustomActionsheet>
        </>
    );
};


export default PlaylistSettingsSheet;
