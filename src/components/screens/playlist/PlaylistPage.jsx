import React, { useEffect, useState, memo, useMemo } from 'react'
import { ImageBackground, StyleSheet, Dimensions } from 'react-native';
import { Box, Factory, HStack, Text, FlatList, useDisclose } from 'native-base'

import { StackActions } from "@react-navigation/native"
import { Feather, Entypo } from '@expo/vector-icons'; 
import { useSelector } from 'react-redux';
import { Audio } from 'expo-av'

import { handleCoverURI, playlistStatsString } from '../../../functions';

import TrackElement from './TrackElement';
import NoContentInfo from '../../general/NoContentInfo';
import LoadingPage from '../loading/LoadingPage';
import PlaylistSettingsSheet from './PlaylistSettingsSheet';


const ImageNB = Factory(ImageBackground);
const FeatherNB = Factory(Feather);
const EntypoNB = Factory(Entypo);

const handleTrackListNav = (navigation, payload) => {
    navigation.navigate("TrackList", { payload });
};

/**
 * PlaylistPage component
 * 
 * @param {object} props props object
 * @param {object} props.navigation Object generated by React Navigation
 * @param {object} props.route Object generated by React Navigation
 * 
 * @returns {JSX.Element} JSX component
 */
const PlaylistPage = ({ navigation, route }) => {
    const payload = route.params.payload;

    const playlistsContent = useSelector(state => state.playlistsContent);
    const tracks = useSelector(state => state.tracks);
    
    const ownTracks = useMemo(() => {
        return playlistsContent
            .filter(link => link.playlistId == payload.id)
            .map(link => link.trackId);
    }, [playlistsContent]); // !! List of IDs !!

    const [textHeight, setTextHeight] = useState(0);
    const [totalDuration, setTotalDuration] = useState(0);

    const [isLoaded, setLoaded] = useState(false);
    
    useEffect(() => {
        const toID = setTimeout(() => handleTotalDuration(), 500);
        return () => clearTimeout(toID);
    }, [ownTracks]);

    const getDuration = async (uri) => {
        const sound = new Audio.Sound();

        try {
            await sound.loadAsync({ uri });
            const data = await sound.getStatusAsync();

            return data.durationMillis / 1000;
        } catch (error) {
            console.error(`Could not load track for '${uri}':`, error);
        }

        return 0;
    }

    const memoDuration = useMemo(async () => {
        let sum = 0;

        for(const trackID of ownTracks) {
            const track = tracks.find(tr => tr.id == trackID);
            const dur = await getDuration(track.fileURI);
            sum += dur;
        }

        return sum;
    }, [ownTracks, tracks]);

    const handleTotalDuration = async () => {
        const sum = await memoDuration;
        setTotalDuration(sum);
        setLoaded(true);
    }

    if(!isLoaded) {
        return <LoadingPage/>;
    }

    return (
        <Box w="100%" h="100%"
            bg={{
                linearGradient: {
                    colors: ["gray.800", "black"],
                    start: [0.5, 0],
                    end: [0.5, 1]
                }
            }}
        >
            <Box w="100%" h="35%">
                <ImageNB w="100%" h="100%"
                    source={handleCoverURI(payload.coverURI)}
                    imageStyle={{ height: "100%" }}/>

                <Box w="100%" h="100%" style={{...StyleSheet.absoluteFillObject}}>
                    <Box w="100%" h="100%"
                        bg={{
                            linearGradient: {
                                colors: ["black", "transparent", "transparent", "black"],
                                start: [0.5, 0],
                                end: [0.5, 1]
                            }
                        }}
                        opacity={0.8}/>

                    <Box w="100%" h="auto" pl="6" pb="6"
                        onLayout={e => setTextHeight(e.nativeEvent.layout.height)}
                        position="relative"
                        bottom={textHeight}
                    >
                        <Text color="white"
                            fontFamily="quicksand_b"
                            fontSize="xl">{payload.title}</Text>

                        <Text color="white"
                            fontFamily="quicksand_r"
                            fontSize="xs">{playlistStatsString(ownTracks.length, totalDuration)}</Text>
                    </Box>
                </Box>
            </Box>

            <TrackList 
                navigation={navigation}
                payload={payload}
                ownTracks={ownTracks}/>
        </Box>
    );
};

const TrackList = memo(({
    navigation,
    payload,
    ownTracks
}) => {
    const screenW = Dimensions.get("screen").width;

    const renderElements = ({item}) => {
        return <TrackElement 
            navigation={navigation}
            w={screenW} 
            trackId={item}
            playlistId={payload.id}
            key={item}/>
    }

    return <>
        {
            ownTracks.length == 0 ? (
                <NoContentInfo
                    onPress={() => handleTrackListNav(navigation, payload)}
                    title="Cam pustiu pe aici..."
                    subtitle={<><Text underline>Adaugă piese</Text> și începe să asculți</>}
                />
            ) : (
                <FlatList w="100%" h="100%" pt="2"
                    data={ownTracks}
                    renderItem={renderElements}
                    _contentContainerStyle={{ alignItems: "center", paddingBottom: 5 }}
                    initialNumToRender={6} />
            )
        }
    </>
}, (prev, next) => prev.navigation == next.navigation
    && prev.payload == next.payload
    && prev.ownTracks == next.ownTracks
);


export const PlaylistHeader = ({ navigation, route }) => {
    const payload = route.params.payload;
    const disclose = useDisclose();

    const handleBack = () => {
        navigation.dispatch(StackActions.pop());
    }

    return (
        <Box w="100%">
            <PlaylistSettingsSheet
                navigation={navigation}
                payload={payload}
                discloseObject={disclose}/>

            <HStack h="16" alignItems="center">
                <FeatherNB h="auto" ml="4"
                    onPress={handleBack}
                    color="primary.50"
                    name="arrow-left"
                    fontSize={30}
                    shadow={5}/>

                <EntypoNB h="auto" ml="auto" mr="4"
                    onPress={disclose.onOpen}
                    color="primary.50"
                    name="dots-three-vertical"
                    fontSize={25}
                    shadow={5}/>
            </HStack>
        </Box>
    )
};


export default PlaylistPage
