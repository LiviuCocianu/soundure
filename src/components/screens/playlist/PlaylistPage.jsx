import React, { useEffect, useLayoutEffect, useState } from 'react'
import { ImageBackground, StyleSheet, Dimensions } from 'react-native';
import { Box, Factory, HStack, Text, FlatList, useDisclose } from 'native-base'

import { StackActions } from "@react-navigation/native"
import { Feather, Entypo, MaterialCommunityIcons } from '@expo/vector-icons'; 
import { useDispatch, useSelector } from 'react-redux';
import Toast from 'react-native-root-toast';
import { Audio } from 'expo-av'

import { handleCoverURI, playlistStatsString } from '../../../functions';
import db from '../../../database/database';
import { playlistContentRemoved } from '../../../redux/slices/playlistContentSlice';
import { playlistRemoved } from '../../../redux/slices/playlistSlice';

import TrackElement from './TrackElement';
import CustomActionsheet, { CustomActionsheetItem } from '../../general/CustomActionsheet';
import NoContentInfo from '../../general/NoContentInfo';
import ConfirmationWindow from '../../modals/ConfirmationWindow';
import LoadingPage from '../loading/LoadingPage';
import { useRef } from 'react';


const ImageNB = Factory(ImageBackground);
const FeatherNB = Factory(Feather);
const EntypoNB = Factory(Entypo);
const MaterialCommunityIconsNB = Factory(MaterialCommunityIcons);

const handleTrackListNav = (navigation, payload) => {
    navigation.navigate("TrackList", { payload });
};

/**
 * PlaylistPage component
 * 
 * @param {object} props props object
 * @param {object} props.navigation Object generated by React Navigation
 * @param {object} props.route Object generated by React Navigation
 * 
 * @returns {JSX.Element} JSX component
 */
const PlaylistPage = ({ navigation, route }) => {
    const payload = route.params.payload;
    const screenW = Dimensions.get("screen").width;

    const playlistsContent = useSelector(state => state.playlistsContent);
    const tracks = useSelector(state => state.tracks);
    
    const [ownTracks, setOwnTracks] = useState([]); // !! List of IDs !!
    const [textHeight, setTextHeight] = useState(0);
    const [totalDuration, setTotalDuration] = useState(0);

    const [isLoaded, setLoaded] = useState(false);

    const renderElements = ({item}) => {
        return <TrackElement 
            navigation={navigation}
            w={screenW} 
            trackId={item} 
            key={item}/>
    }

    useEffect(() => {
        setOwnTracks(playlistsContent
            .filter(link => link.playlistId == payload.id)
            .map(link => link.trackId));
    }, [playlistsContent]);
    
    useEffect(() => {
        const toID = setTimeout(() => handleTotalDuration(), 500);
        return () => clearTimeout(toID);
    }, [ownTracks]);

    const handleTotalDuration = async () => {
        let sum = 0;

        for(const trackID of ownTracks) {
            const track = tracks.find(tr => tr.id == trackID);
            const uri = track.fileURI;
            const dur = await getDuration(uri);
            sum += dur;
        }

        setTotalDuration(sum);
        setLoaded(true);
    }

    const getDuration = async (uri) => {
        const sound = new Audio.Sound();

        try {
            await sound.loadAsync({ uri });
            const data = await sound.getStatusAsync();

            return data.durationMillis / 1000;
        } catch (error) {
            console.error(`Could not load track for '${uri}':`, error);
        }

        return 0;
    }

    if(!isLoaded) {
        return <LoadingPage/>;
    }

    return (
        <Box w="100%" h="100%"
            bg={{
                linearGradient: {
                    colors: ["gray.800", "black"],
                    start: [0.5, 0],
                    end: [0.5, 1]
                }
            }}
        >
            <Box w="100%" h="35%">
                <ImageNB w="100%" h="100%"
                    source={handleCoverURI(payload.coverURI)}
                    imageStyle={{ height: "100%" }}/>

                <Box w="100%" h="100%" style={{...StyleSheet.absoluteFillObject}}>
                    <Box w="100%" h="100%"
                        bg={{
                            linearGradient: {
                                colors: ["black", "transparent", "transparent", "black"],
                                start: [0.5, 0],
                                end: [0.5, 1]
                            }
                        }}
                        opacity={0.8}/>

                    <Box w="100%" h="auto" pl="6" pb="6"
                        onLayout={e => setTextHeight(e.nativeEvent.layout.height)}
                        position="relative"
                        bottom={textHeight}
                    >
                        <Text color="white"
                            fontFamily="quicksand_b"
                            fontSize="xl">{payload.title}</Text>

                        <Text color="white"
                            fontFamily="quicksand_r"
                            fontSize="xs">{playlistStatsString(ownTracks.length, totalDuration)}</Text>
                    </Box>
                </Box>
            </Box>

            {
                ownTracks.length == 0 ? (
                    <NoContentInfo 
                        onPress={() => handleTrackListNav(navigation, payload)}
                        title="Cam pustiu pe aici..."
                        subtitle={<><Text underline>Adaugă piese</Text> și începe să asculți</>}
                    />
                ) : (
                    <FlatList w="100%" h="100%" pt="2"
                        data={ownTracks}
                        renderItem={renderElements}
                        _contentContainerStyle={{ alignItems: "center", paddingBottom: 5 }}
                        initialNumToRender={6}/>
                )
            }
        </Box>
    );
};

export const PlaylistHeader = ({ navigation, route }) => {
    const payload = route.params.payload;

    const {
        isOpen,
        onOpen,
        onClose
    } = useDisclose();

    const [deletionModal, toggleDeletionModal] = useState(false);
    const dispatch = useDispatch();

    const handleBack = () => {
        navigation.dispatch(StackActions.pop());
    }

    const handleTrackListOption = async () => {
        await onClose();
        handleTrackListNav(navigation, payload);
    }

    const handleDeletionModal = () => {
        onClose();
        toggleDeletionModal(true);
    }

    const handlePlaylistDeletion = () => {
        db.selectFrom("PlaylistContent", ["id"], "playlistId = ?", [payload.id]).then(rows => {
            db.deleteFrom("PlaylistContent", "playlistId = ?", [payload.id]).then(() => {
                rows.forEach(row => dispatch(playlistContentRemoved(row)));

                db.deleteFrom("Playlist", "id = ?", [payload.id]).then(() => {
                    dispatch(playlistRemoved({id: payload.id}));
                    handleBack();

                    Toast.show("Playlist eliminat!", {
                        duration: Toast.durations.LONG,
                        delay: 500
                    });
                });
            });
        });
    }

    return (
        <Box w="100%">
            <ConfirmationWindow 
                isOpen={deletionModal}
                toggleVisible={toggleDeletionModal}
                onYes={handlePlaylistDeletion}
            />

            <CustomActionsheet
                title="Setări playlist"
                isOpen={isOpen} 
                onOpen={onOpen} 
                onClose={onClose}
            >
                <CustomActionsheetItem text="Adaugă o piesă"
                    iconName="playlist-plus"
                    IconType={MaterialCommunityIconsNB}
                    onPress={handleTrackListOption}/>
                
                <CustomActionsheetItem text="Șterge playlist"
                    iconName="playlist-remove"
                    IconType={MaterialCommunityIconsNB}
                    onPress={handleDeletionModal}/>
            </CustomActionsheet>

            <HStack h="16" alignItems="center">
                <FeatherNB h="auto" ml="4"
                    onPress={handleBack}
                    color="primary.50"
                    name="arrow-left"
                    fontSize={30}
                    shadow={5}/>

                <EntypoNB h="auto" ml="auto" mr="4"
                    onPress={onOpen}
                    color="primary.50"
                    name="dots-three-vertical"
                    fontSize={25}
                    shadow={5}/>
            </HStack>
        </Box>
    )
};


export default PlaylistPage
