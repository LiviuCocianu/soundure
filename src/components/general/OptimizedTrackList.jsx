import React, { memo } from 'react'
import { Dimensions } from 'react-native';
import { Text, FlatList } from 'native-base';

import TrackElement from '../screens/playlist/TrackElement';
import NoContentInfo from './NoContentInfo';
import { TRACK_EL_HEIGHT } from '../../constants';


/**
 * @callback selectionHandler
 * @param {boolean} isSelected If the track element is selected
 * @param {number} trackId ID for selected track
 * 
 * @callback onInfoPress
 */

/**
 * OptimizedTrackList component
 * 
 * @param {object} props props object
 * @param {object} props.navigation Object generated by React Navigation
 * @param {object[]} props.ownTracks A list of all track IDs
 * @param {object} [props.playlist] Playlist info, if the given tracks are tied to one
 * @param {number} [props.itemBatchSize] The number of tracks to render initially and
 * to render in batches when scrolling
 * @param {onInfoPress} [props.onInfoPress] Callback that triggers when the "no content info" area is pressed
 * 
 * @param {object} [props.selection] Properties for selection mode
 * @param {boolean} [props.selection.enabled] If selection mode is enabled for all track elements
 * @param {boolean} [props.selection.areAllSelected] If all track elements are selected. This should be
 * a state hook.
 * @param {selectionHandler} [props.selection.selectionHandler] Callback that triggers if a selection happens
 * 
 * @returns {JSX.Element} JSX component
 */
const OptimizedTrackList = ({
    navigation,
    ownTracks,
    playlist,
    itemBatchSize=6,
    onInfoPress=() => { },
    selection={
        enabled: false,
        areAllSelected: false,
        selectionHandler: () => { }
    },
}) => {
    const screenW = Dimensions.get("screen").width;

    const renderElements = ({ item }) => {
        return <TrackElement
            navigation={navigation}
            w={screenW - (screenW * 0.05)}
            trackId={item}
            playlistId={playlist ? playlist.id : undefined}
            selectionMode={selection.enabled}
            areAllSelected={selection.areAllSelected}
            selectionHandler={selection.selectionHandler}
            key={item} />
    }

    const getItemLayout = (data, index) => ({
        length: TRACK_EL_HEIGHT,
        offset: TRACK_EL_HEIGHT * index,
        index
    });

    return <>
        {
            ownTracks.length == 0 ? (
                <NoContentInfo
                    onPress={onInfoPress}
                    subtitle={<><Text underline>Adaugă piese</Text> și începe să asculți</>}
                />
            ) : (
                <FlatList w="100%" h="100%" pt="2"
                    data={ownTracks}
                    renderItem={renderElements}
                    _contentContainerStyle={{ alignItems: "center", paddingBottom: 5 }}
                    initialNumToRender={itemBatchSize} 
                    maxToRenderPerBatch={itemBatchSize}
                    getItemLayout={getItemLayout}/>
            )
        }
    </>
}


export default memo(OptimizedTrackList, (prev, next) => prev.navigation == next.navigation
    && prev.ownTracks == next.ownTracks
    && prev.playlist == next.playlist
    && prev.itemBatchSize == next.itemBatchSize
    && prev.onInfoPress == next.onInfoPress
    && prev.selection.enabled == next.selection.enabled
    && prev.selection.areAllSelected == next.areAllSelected
    && prev.selection.selectionHandler == next.selectionHandler
);